Transform: 'AWS::Serverless-2016-10-31'
Globals:
  Function:
    Timeout: 10
    Environment:
      Variables:
        ENVIRONMENT: PRODUCTION
        CreateFeatureFlagFunction: FeatureFlagBackendProdLam-CreateFeatureFlagFunctio-YOVQpOQ9W4hR
        CreateUserFeatureFlagFunction: FeatureFlagBackendProdLam-CreateUserFeatureFlagFun-Fi1GnCD4KsBu
        GetFeatureFlagFunction: FeatureFlagBackendProdLambd-GetFeatureFlagFunction-I2kT1C4qt7i8
        GetAllFeatureFlagFunction: FeatureFlagBackendProdLam-GetAllFeatureFlagFunctio-kqYPpHWHnPqR
        UpdateFeatureFlagFunction: FeatureFlagBackendProdLam-UpdateFeatureFlagFunctio-9g8Vbr3cPzHL
        UpdateUserFeatureFlagFunction: FeatureFlagBackendProdLam-UpdateUserFeatureFlagFun-FkeJ3SHwYIjo
        GetUserFeatureFlagsFunction: FeatureFlagBackendProdLam-GetUserFeatureFlagsFunct-Qj4UvchESEwz
        GetUserFeatureFlagFunction: FeatureFlagBackendProdLam-GetUserFeatureFlagFuncti-X4iHFCSiLo92
        RateLimiterFunction: FeatureFlagBackendProdLambdas-RateLimiterFunction-WubbBb4Naxsm

Resources:
  HealthCheckFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: health-check/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64  
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /health-check
            Method: GET

  RateLimiterFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: rateLimiterLambda/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64  
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /mark-concurrency-zero
            Method: PATCH

  ResetLimitFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: resetLimitLambda/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64  
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /reset-limit
            Method: POST

  GetFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: getFeatureFlagById/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /feature-flags/{flagId}
            Method: GET

  CreateFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: createFeatureFlag/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /feature-flags/
            Method: POST

  UpdateFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: updateFeatureFlag/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /feature-flags/{flagId}
            Method: PATCH

  GetAllFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: getAllFeatureFlags/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /feature-flags/
            Method: GET

  GetUserFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: getUserFeatureFlag/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /users/{userId}/feature-flags/{flagId}
            Method: GET

  GetUserFeatureFlagsFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: getUserFeatureFlags/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /users/{userId}/feature-flags
            Method: GET

  CreateUserFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: createUserFeatureFlag/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /users/{userId}/feature-flags/{flagId}
            Method: POST

  UpdateUserFeatureFlagFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: updateUserFeatureFlag/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /users/{userId}/feature-flags/{flagId}
            Method: PATCH
